应用层，传输层，网络层，链路层，实体层

应用层：
	http/https
	HTTPS:
		作用：加密传输的数据
		对称加密：使用对称加密技术，使得客户端和服务器都能加密解密
		非对称加密：服务器可以生成一对不同的密钥（所谓非对称），一把私自保存，称为私钥；一把向所有人公开，称为公钥这对密钥有这样的性质公钥加密后的数据只有私钥能解密，私钥加密后的数据只有公钥能解密

		问：如何在通信前，分配钥匙？

		答：客户端在每次请求通信之前，先和服务器协商，通过某种办法，产生只有双方知道的对称密钥这个过程就是所谓：密钥交换(Key Exchange)

		RSA：RSA密钥交换算法需要客户端向服务器提供一个Pre-Master-Key，然后通信双方再生成Master-Key，最后根据Master-Key产生后续一系列所需要的密钥，包括传输数据的时候使用的对称密钥

		问：如何安全的传输Pre-Master-Key？

		答：客户端把Pre-Master-Key用服务器的公钥加密后，传送给服务器因为只有服务器才有私钥，所以只有服务器才能解密数据，获取客户端发送来的 Pre-Master-Key

		具体的交互过程：

			客户端向服务器索取公钥 PublicKey；
			服务器将公钥发给客户端（这里没有保密需求，因为公钥是向所有人公开的）；
			客户端使用服务器的公钥 PublicKey 把 Pre-Master-Key 加密成密文，传送给服务器；
			服务器用私钥 PrivateKey 解密密文，获取到客户端发送的 Pre-Master-Key;

		问：步骤2是面向所有人，可能被劫持，怎么办？

		答：服务器会根据域名，公钥等在权威部门搞一个证书，证书如果有效，说明公钥可信

		问：如何证明证书有效？

		答：只要服务器发送的证书上有权威机构 Authority 的签名，就可以确信证书是颁发给服务器的，而不是谁伪造的

		问：签名如何生成？

		答：数字证书认证机构（Certificate Authority，简称 CA）生成一对公/私钥；
			服务器将自己的域名、公钥等信息提交给 CA 审查；
			CA 审查无误，使用私钥把服务器信息的摘要加密，生成的密文就是所谓签名（Signature）；
			CA 把服务器的信息、签名、有效期等信息集合到一张证书上，颁发给服务器；
			客户端收到服务器发送的证书后，使用CA的公钥解密签名，获得服务器信息的摘要，如果和证书上记录的服务器信息的摘要一致，说明服务器信息是经过 CA 认可的
传输层
	tcp：
		三次握手
			客户端TCP状态迁移：
			CLOSED->SYN_SENT->ESTABLISHED->FIN_WAIT_1->FIN_WAIT_2->TIME_WAIT->CLOSED
			服务器TCP状态迁移：
			CLOSED->LISTEN->SYN收到->ESTABLISHED->CLOSE_WAIT->LAST_ACK->CLOSED

			client发送syn（k）
			server发送syn（k+1）ack（j）
			client发送ack（j+1）

		传输数据

			流量控制：
				有一种情况，如果S已经告诉C自己的缓冲区已满，于是C停止发送数据；等待一段时间后，S的缓冲区出现了富余，于是给C发送报文告诉C我的rwnd大小为400，但是这个报文不幸丢失了，于是就出现C等待S的通知||S等待C发送数据的死锁状态。为了处理这种问题，TCP引入了持续计时器（Persistence timer），当C收到对方的零窗口通知时，就启用该计时器，时间到则发送一个1字节的探测报文，对方会在此时回应自身的接收窗口大小，如果结果仍未0，则重设持续计时器，继续等待。
			快重传、快恢复
			一切的基础还是慢开始，这种方法的思路是这样的：
			-1. 发送方维持一个叫做“拥塞窗口”的变量，该变量和接收端口共同决定了发送者的发送窗口；
			-2. 当主机开始发送数据时，避免一下子将大量字节注入到网络，造成或者增加拥塞，选择发送一个1字节的试探报文；
			-3. 当收到第一个字节的数据的确认后，就发送2个字节的报文；
			-4. 若再次收到2个字节的确认，则发送4个字节，依次递增2的指数级；
			-5. 最后会达到一个提前预设的“慢开始门限”，比如24，即一次发送了24个分组，此时遵循下面的条件判定：
			*1. cwnd < ssthresh，继续使用慢开始算法；
			*2. cwnd > ssthresh，停止使用慢开始算法，改用拥塞避免算法；
			*3. cwnd = ssthresh，既可以使用慢开始算法，也可以使用拥塞避免算法；
			-6. 所谓拥塞避免算法就是：每经过一个往返时间RTT就把发送方的拥塞窗口+1，即让拥塞窗口缓慢地增大，按照线性规律增长；
			-7. 当出现网络拥塞，比如丢包时，将慢开始门限设为原先的一半，然后将cwnd设为1，执行慢开始算法（较低的起点，指数级增长）；

			快重传的机制是：
			-1. 接收方建立这样的机制，如果一个包丢失，则对后续的包继续发送针对该包的重传请求；
			-2. 一旦发送方接收到三个一样的确认，就知道该包之后出现了错误，立刻重传该包；
			-3. 此时发送方开始执行“快恢复”算法：
			*1. 慢开始门限减半；
			*2. cwnd设为慢开始门限减半后的数值；
			*3. 执行拥塞避免算法（高起点，线性增长）；
		四次挥手

	udp：
